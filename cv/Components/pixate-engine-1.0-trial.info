{"Name":"Pixate","Id":32,"Alias":"pixate-engine","Description":"\nPixate Engine makes styling your native mobile app as easy as styling\na web page. Style by type (e.g. \u0027button\u0027) or by assigning CSS IDs or\nClasses to your views. Styles can be changed at run-time as well by\ndownloading CSS and assets on demand.\n\n```csharp\n\tUIButton button1 = UIButton.FromType (UIButtonType.RoundedRect);\n\tbutton1.SetStyleId (\"button1\");\n\tbutton1.SetStyleClass (\"myButtons\");\n\n\tUIButton button2 = UIButton.FromType (UIButtonType.RoundedRect);\n\tbutton2.SetStyleId (\"button2\");\n\tbutton2.SetStyleClass (\"myButtons\");\n```\n\n```css\n.myButtons {\n\tborder-radius: 10px;\n\tsize: 100px 50px;\n}\n\n#button1 {\n\tbackground-color: blue;\n\tcolor: white;\n\ttext: Hello World;\n\tposition: 10px 100px;\n}\n\n#button2 {\n\tbackground-color: yellow;\n\tcolor: black;\n\ttext: WOW!;\n\tposition: 10px 160px;\n}\n```\n\nStyle your entire app effortlessly while dramatically reducing code and\nmake your app\u0027s design dynamically updatable without an app update. Learn\nmore at [Pixate.com](http://www.pixate.com).\n","Version":"1.0","Summary":"Style your native mobile apps using CSS.","QuickStart":"## Initialize the Pixate Engine\n\nTo get started, you\u0027ll need to call into the main start point for the Pixate Engine.\n\nAt the top of your Main.cs file, add this import line:\n\n```csharp\n\tusing PixateLib;\n```\n\nThen, at the beginning of your Main method, add this line:\n\n```csharp\n\tPXEngine.LicenseKeyForUser(\"SERIAL NUMBER\", \"USER NAME\");\n```\n\nIf you are trying the product, you can just use empty double quotes for the **SERIAL NUMBER** and **USER NAME** fields:\n\n```csharp\n\tPXEngine.LicenseKeyForUser(\"\", \"\");\n```\n\n## Adding a CSS File\n\nNow right-click on your project\u0027s *Resources* folder and select Add -\u003e New File. Choose \u0027Misc\u0027 from the list on the left, and \u0027Empty Text File\u0027 from the list in the middle. Name your file \u0027*default.css*\u0027.\n\n## Setting up for Styling (via Xcode)\n\nAt this point, let\u0027s add a button or two to our application. Double-click on the .xib file for your project (e.g. \u003cProjectName\u003eViewController.xib). Add a couple of buttons to your main view.\n\t\nWith each of the new buttons you added, select one, activate the Identity Inspector in the Utilities View. \n\nNow we need to give the buttons a \"styleId\" so that you can reference it from your CSS. We\u0027ll add a Runtime Attribute. Click the small \u0027+\u0027 and add an entry with a key path of `styleId`, a type of `String`, and a value of `button1`. For the second button add a `styleId`, a type of `String`, and a value of `button2`.\n\nNow save and close Xcode. \n\n## Setting up for Styling (in code)\n\nCreating a few buttons in code is just as easy, just do something like this in your main view controller:\n\n```csharp\nUIButton button1 = UIButton.FromType (UIButtonType.RoundedRect);\nbutton1.SetStyleId (\"button1\");\nbutton1.SetStyleClass (\"myButtons\");\n\nUIButton button2 = UIButton.FromType (UIButtonType.RoundedRect);\nbutton2.SetStyleId (\"button2\");\nbutton2.SetStyleClass (\"myButtons\");\n```\n\n## Styling the Buttons\n\nNow comes the easy part, just open your default.css file and add some CSS. For our two buttons, let\u0027s try something simple:\n\n```css\n.myButtons {\n\tsize: 100px 50px;\n\tleft: 110px;\n    border-radius: 10px;\n}\n\n#button1 {\n\ttop: 50px;\n\ttext: Pixate;\n  \tcolor           : #ffffff;\n  \tbackground-color: linear-gradient(#3c4145, #585e62);\n  \tborder-width    : 1px;\n  \tborder-color    : #212325;\n  \tbox-shadow      : inset 0 1px 0 rgba(255,255,255,0.3),\n                          0 1px 1px rgba(0,0,0,0.5);\n}\n\n#button2 {\n\ttop: 120px;\n\ttext: Engine;\n\tcolor          : #ffffff;\n  \tbackground-color: linear-gradient(#215a88, #4d93dd);\n  \tborder-width   : 1px;\n  \tborder-color   : #212325;\n  \tbox-shadow     : inset 0 1px 0 rgba(101,177,232,0.9),\n                           0 1px 2px rgba(0,0,0,0.5);\n}\n```\n\nNotice here we style the *button* type generically as well as the two specific instances we set *styleId* on.\n\n## Sample App\n\nThere is a sample app included in this component that styles two buttons. Be sure to take a look.\n\n## Documentation\n\n* Visit the [Pixate Documentation Center](http://www.pixate.com/documentation.html).\n* MonoTouch Module on Github [repository](https://github.com/Pixate/MonoTouch-Pixate).\n\n## Licensing\n\nPlease visit the [Pixate Store](http://sites.fastspring.com/pixate/product/purchase) to purchase a permanent, commercial license to the Pixate Engine for iOS.\n\n","Hash":"2ecd1e91e4ccc9f0e42e379b0b3e4e15","TargetPlatforms":["ios"],"TrialHash":"2ecd1e91e4ccc9f0e42e379b0b3e4e15"}